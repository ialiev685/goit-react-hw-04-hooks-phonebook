{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactsList/ContactsList.jsx","components/Section/Section.jsx","components/Filter/Filter.jsx","components/App.js","index.js"],"names":["ContactForm","onSubmit","useState","name","setName","number","setNumber","handleChange","e","target","value","preventDefault","className","type","pattern","title","required","onChange","autoComplete","ContactItem","onDelete","id","onClick","ContactsList","contacts","map","Section","children","Filter","filter","App","JSON","parse","localStorage","getItem","setContacts","setFilter","useEffect","setItem","stringify","checkDoubleName","newContact","normalizedName","toLowerCase","some","alert","contact","uuidv4","prevContacts","valueFilter","normalizedFilter","includes","getFilterContacts","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e6b55b1.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"./ContactForm.scss\";\n\nconst ContactForm = ({ onSubmit }) => {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const handleChange = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"number\":\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    onSubmit({ name, number });\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"form-contacts\">\n      <label className=\"form-contacts__input\">\n        Name:\n        <input\n          className=\"form-contacts__text\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={handleChange}\n          value={name}\n          autoComplete=\"off\"\n        />\n      </label>\n      <label className=\"form-contacts__input\">\n        Number:\n        <input\n          className=\"form-contacts__text\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={handleChange}\n          value={number}\n          autoComplete=\"off\"\n        />\n      </label>\n      <button type=\"submit\" className=\"form-contacts__button\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import \"./ContactItem.scss\";\nimport PropTypes from \"prop-types\";\n\nconst ContactItem = ({ name, number, onDelete, id }) => {\n  return (\n    <li className=\"contacts-list__item\">\n      <span>\n        {name}: {number}\n      </span>\n      <input\n        className=\"contacts-list__button\"\n        type=\"button\"\n        value=\"delete\"\n        onClick={() => onDelete(id)}\n      />\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nexport default ContactItem;\n","import ContactItem from \"../ContactItem\";\nimport \"./ContactsList.scss\";\n\nimport PropTypes from \"prop-types\";\n\nconst ContactsList = ({ contacts, onDelete }) => {\n  return (\n    <div>\n      <ul className=\"contacts-list\">\n        {contacts.map(({ id, name, number }) => (\n          <ContactItem\n            key={id}\n            name={name}\n            number={number}\n            onDelete={onDelete}\n            id={id}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactsList;\n","import \"./Section.scss\";\n\nconst Section = ({ children }) => {\n  return <section className=\"section\">{children}</section>;\n};\n\nexport default Section;\n","import \"./Filter.scss\";\nimport PropTypes from \"prop-types\";\n\nconst Filter = ({ filter, onChange }) => {\n  return (\n    <label className=\"filter-input\">\n      Поиск:\n      <input\n        className=\"filter-input__text\"\n        type=\"text\"\n        value={filter}\n        name=\"filter\"\n        onChange={onChange}\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  filter: PropTypes.string,\n};\n\nexport default Filter;\n","import React, { useState, useEffect } from \"react\";\n\nimport ContactForm from \"./ContactForm\";\nimport ContactsList from \"./ContactsList\";\nimport Section from \"./Section\";\nimport Filter from \"./Filter\";\nimport \"./App.scss\";\n\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst App = () => {\n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(localStorage.getItem(\"contacts\")) ?? [];\n  });\n  const [filter, setFilter] = useState(\"\");\n\n  useEffect(() => {\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addContact = (newContact) => {\n    if (checkDoubleName(newContact)) {\n      alert(`${newContact.name} уже есть в контактах.`);\n      return false;\n    }\n    const contact = {\n      id: uuidv4(),\n      ...newContact,\n    };\n\n    setContacts((prevContacts) => {\n      return [contact, ...prevContacts];\n    });\n  };\n\n  const checkDoubleName = (newContact) => {\n    const { name } = newContact;\n    const normalizedName = name.toLowerCase();\n\n    return contacts.some(({ name }) => name.toLowerCase() === normalizedName);\n  };\n\n  const deleteContact = (contactId) => {\n    setContacts((prevContacts) => {\n      return prevContacts.filter(({ id }) => id !== contactId);\n    });\n  };\n\n  const handleChange = (e) => {\n    const value = e.target.value;\n\n    setFilter(value);\n  };\n\n  const getFilterContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  return (\n    <Section>\n      <h1 className=\"caption\">Phonebook</h1>\n      <ContactForm onSubmit={addContact} />\n      <h2 className=\"title\">Contacts</h2>\n      <Filter valueFilter={filter} onChange={handleChange} />\n      <ContactsList contacts={getFilterContacts()} onDelete={deleteContact} />\n    </Section>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}